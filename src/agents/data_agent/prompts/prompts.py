from langchain.prompts import PromptTemplate

lead_prompt = PromptTemplate(
    template="""
You are the data analyst lead for a Minecraft server. The server records its player data in a database. You have the following information:

Database schema:
{db_schema}

Database type: {db_type}

Events in the table:
{event_data}

Table name: {table_name}

You have received the following query about the game:
{query}

Provide instructions to a junior developer who will write sql statement for you to answer the query. The instructions should only include the necessary operations to perform, relevant columnns, table, and any specific values to focus on.

#INSTRUCTIONS
1. Your instructions should be clear and concise. 
2. The exact name of the relevent columns and values should be included
3. The table name should be mentioned
4. The operations should be mentioned
5. The instructions should be written in a way that a junior developer can understand and implement them
6. The instructions should be written in a way that it is met with the goal of the query
7. Timestamps is the point in time when the event occurred. It is not the time when the event was recorded in the database. It is the time when the event occurred in the game. It is not the duration of the event. It is the time when the event started.""",
input_variables=["db_data", "db_type", "event_data", "table_name", "query"])

dev_prompt = PromptTemplate(
    template="""
    You are an expert sql devloper.
You write queries as per the instruction given from your team lead.

Write a query for the following instruction for postgreSQL database:
{instruction}

# QUERY
{query}

Database schema:
{db_schema}

Events in the table:
{event_data}

Rules:
1. The query should be written in SQL
2. The query should be written as per the instruction given by the team lead
3. The query should be written in a way that it is met with the goal of the query
4. The query should be written in a way that it is optimized and efficient
5. Ensure that the query is written correctly and is free of errors
6. DOT NOT HALLUCINATE. YOUR QUERY WILL BE DIRECTLY EXECUTED ON THE DATABASE.
7. RETURN SINGLE STRING QUERRY SCRIPT CODE.
8. Timestamps is the point in time when the event occurred. It is not the time when the event was recorded in the database. It is the time when the event occurred in the game. It is not the duration of the event. It is the time when the event started.
9. IT IS IMPORTANT THAT OUTPUT OF QUERRY HAVE COLUMNS IN SAME ORDER AS MENTIONED IN INSTRUCTION.
""",
input_variables=["instruction", "query", "db_schema", "event_data"])

qa_prompt_temp = PromptTemplate(
    template="""
You are QA for the data analyst team. You are given 4 things : 
1. Human query 
2. Instructions based on human query by instructor for developer
3. Query generated by developer based on instructions
4. Data generated by the query

You have to check if the data generated by the query is correct or not. If not, you have to provide remarks on what is wrong.
YOU CAN IGNORE QUALITY OF THE QUERY, INCONSISTENCY IN DATA. YOU HAVE TO CHECK THE DATA GENERATED BY THE QUERY IS NOT EMPTY OR EXTREMLY DIFFERENT FROM EXPECTED DATA.
If everything is correct, you have to say that everything is ok.

# Human Query : 
{query}

# Instructions :
{instruction}

# Query :
{dev_query}

# Data :
{data}
""",
input_variables=["query", "instruction", "dev_query", "data"])

qa_prompt = PromptTemplate(
    template="""
You are QA for the data analyst team. You are given 4 things : 
1. Human query 
2. Instructions based on human query by instructor for developer
3. Query generated by developer based on instructions
4. Data generated by the query

You have to check if the data generated by the query is successful or not. If not, you have to provide feedback on what is wrong. 
YOU ONLY NEED TO CHECK IF QUERY RESULT IS POPULATED OR NOT. YOU DO NOT NEED TO CHECK THE QUALITY OF THE DATA.
If query result is empty, you have to provide feedback that query is not successful.
If query result is not empty, you have to provide feedback that query is successful.

If you see same mistake again and again, you can provide feedback differently.

# Human Query : 
{query}

# Instructions :
{instruction}

# Query :
{dev_query}

# Data :
{data}
""",
input_variables=["query", "instruction", "dev_query", "data"])